//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamWeb.PhotoService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhotoDTO", Namespace="http://schemas.datacontract.org/2004/07/ExamWCF.DTOs")]
    [System.SerializableAttribute()]
    public partial class PhotoDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AlbumIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsPhotoAlbumThumbnailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhotoFileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PhotoIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhotoPathField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AlbumID {
            get {
                return this.AlbumIDField;
            }
            set {
                if ((this.AlbumIDField.Equals(value) != true)) {
                    this.AlbumIDField = value;
                    this.RaisePropertyChanged("AlbumID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsPhotoAlbumThumbnail {
            get {
                return this.IsPhotoAlbumThumbnailField;
            }
            set {
                if ((this.IsPhotoAlbumThumbnailField.Equals(value) != true)) {
                    this.IsPhotoAlbumThumbnailField = value;
                    this.RaisePropertyChanged("IsPhotoAlbumThumbnail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhotoFileName {
            get {
                return this.PhotoFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoFileNameField, value) != true)) {
                    this.PhotoFileNameField = value;
                    this.RaisePropertyChanged("PhotoFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhotoID {
            get {
                return this.PhotoIDField;
            }
            set {
                if ((this.PhotoIDField.Equals(value) != true)) {
                    this.PhotoIDField = value;
                    this.RaisePropertyChanged("PhotoID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhotoPath {
            get {
                return this.PhotoPathField;
            }
            set {
                if ((object.ReferenceEquals(this.PhotoPathField, value) != true)) {
                    this.PhotoPathField = value;
                    this.RaisePropertyChanged("PhotoPath");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PhotoService.IPhotoService")]
    public interface IPhotoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/GetPhotos", ReplyAction="http://tempuri.org/IPhotoService/GetPhotosResponse")]
        ExamWeb.PhotoService.PhotoDTO[] GetPhotos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/GetPhotos", ReplyAction="http://tempuri.org/IPhotoService/GetPhotosResponse")]
        System.Threading.Tasks.Task<ExamWeb.PhotoService.PhotoDTO[]> GetPhotosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/GetPhotoByID", ReplyAction="http://tempuri.org/IPhotoService/GetPhotoByIDResponse")]
        ExamWeb.PhotoService.PhotoDTO GetPhotoByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/GetPhotoByID", ReplyAction="http://tempuri.org/IPhotoService/GetPhotoByIDResponse")]
        System.Threading.Tasks.Task<ExamWeb.PhotoService.PhotoDTO> GetPhotoByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/InsertPhoto", ReplyAction="http://tempuri.org/IPhotoService/InsertPhotoResponse")]
        void InsertPhoto(ExamWeb.PhotoService.PhotoDTO photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/InsertPhoto", ReplyAction="http://tempuri.org/IPhotoService/InsertPhotoResponse")]
        System.Threading.Tasks.Task InsertPhotoAsync(ExamWeb.PhotoService.PhotoDTO photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/UpdatePhoto", ReplyAction="http://tempuri.org/IPhotoService/UpdatePhotoResponse")]
        void UpdatePhoto(ExamWeb.PhotoService.PhotoDTO photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/UpdatePhoto", ReplyAction="http://tempuri.org/IPhotoService/UpdatePhotoResponse")]
        System.Threading.Tasks.Task UpdatePhotoAsync(ExamWeb.PhotoService.PhotoDTO photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/DeletePhoto", ReplyAction="http://tempuri.org/IPhotoService/DeletePhotoResponse")]
        void DeletePhoto(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhotoService/DeletePhoto", ReplyAction="http://tempuri.org/IPhotoService/DeletePhotoResponse")]
        System.Threading.Tasks.Task DeletePhotoAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPhotoServiceChannel : ExamWeb.PhotoService.IPhotoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PhotoServiceClient : System.ServiceModel.ClientBase<ExamWeb.PhotoService.IPhotoService>, ExamWeb.PhotoService.IPhotoService {
        
        public PhotoServiceClient() {
        }
        
        public PhotoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PhotoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PhotoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ExamWeb.PhotoService.PhotoDTO[] GetPhotos() {
            return base.Channel.GetPhotos();
        }
        
        public System.Threading.Tasks.Task<ExamWeb.PhotoService.PhotoDTO[]> GetPhotosAsync() {
            return base.Channel.GetPhotosAsync();
        }
        
        public ExamWeb.PhotoService.PhotoDTO GetPhotoByID(int id) {
            return base.Channel.GetPhotoByID(id);
        }
        
        public System.Threading.Tasks.Task<ExamWeb.PhotoService.PhotoDTO> GetPhotoByIDAsync(int id) {
            return base.Channel.GetPhotoByIDAsync(id);
        }
        
        public void InsertPhoto(ExamWeb.PhotoService.PhotoDTO photo) {
            base.Channel.InsertPhoto(photo);
        }
        
        public System.Threading.Tasks.Task InsertPhotoAsync(ExamWeb.PhotoService.PhotoDTO photo) {
            return base.Channel.InsertPhotoAsync(photo);
        }
        
        public void UpdatePhoto(ExamWeb.PhotoService.PhotoDTO photo) {
            base.Channel.UpdatePhoto(photo);
        }
        
        public System.Threading.Tasks.Task UpdatePhotoAsync(ExamWeb.PhotoService.PhotoDTO photo) {
            return base.Channel.UpdatePhotoAsync(photo);
        }
        
        public void DeletePhoto(int id) {
            base.Channel.DeletePhoto(id);
        }
        
        public System.Threading.Tasks.Task DeletePhotoAsync(int id) {
            return base.Channel.DeletePhotoAsync(id);
        }
    }
}
