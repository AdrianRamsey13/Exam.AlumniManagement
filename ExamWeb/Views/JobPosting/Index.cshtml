@model ExamWeb.Models.JobPostingModel

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.10.21/css/jquery.dataTables.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/fixedheader/3.1.7/css/fixedHeader.dataTables.min.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.datatables.net/fixedcolumns/3.3.2/css/fixedColumns.dataTables.min.css">
    <style>
        .dataTables_wrapper {
            width: max-content;
        }

            .dataTables_wrapper .dataTables_paginate {
                float: none;
                text-align: center;
            }

            .dataTables_wrapper .dataTables_info {
                float: left;
                padding-top: 0.755em;
            }

            .dataTables_wrapper .bottom {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
    </style>
}

<h2>Job Posting Management</h2>

<p>
    <a href="javascript:void(0)" data-bs-toggle="modal" data-bs-target="#createModal">Create New</a>
</p>

<div style="overflow-x: auto; max-width: 100%;">
    <table class="table" id="jobPostingData" style="width:100%">
        <thead>
            <tr>
                <th><input type="checkbox" id="selectAll" /></th>
                <th>Actions</th>
                <th>No.</th>
                <th>Title</th>
                <th>Job Description</th>
                <th>Candidates</th>
                <th>Status</th>
                <th>Last Update</th>
            </tr>
        </thead>
    </table>

    @*-------------Create Modal-----------------*@
    <div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="createModalLabel">Create New Job Posting</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                @using (Html.BeginForm("Create", "JobPosting", FormMethod.Post, new { id = "createForm" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="modal-body">
                        <div class="mb-3">
                            @Html.LabelFor(model => model.Title, "Job Title", new { @class = "form-label" })
                            @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            @Html.LabelFor(model => model.Company, new { @class = "form-label" })
                            @Html.EditorFor(model => model.Company, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Company, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3 row">
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.EmploymentTypeID, "Employment Type", new { @class = "form-label" })
                                @Html.EditorFor(model => model.EmploymentTypeID, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EmploymentTypeID, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-md-6">
                                @Html.LabelFor(model => model.MinimumExperience, new { @class = "form-label" })
                                @Html.EditorFor(model => model.MinimumExperience, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MinimumExperience, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="mb-3">
                            @Html.LabelFor(model => model.JobDescription, new { @class = "form-label" })
                            @Html.TextAreaFor(model => model.JobDescription, new { @class = "form-control", rows = "3" })
                            @Html.ValidationMessageFor(model => model.JobDescription, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3">
                            @Html.Label("Skills", new { @class = "form-label" })
                            @Html.EditorFor(model => model.Skills, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Skills, "", new { @class = "text-danger" })
                        </div>
                        <div class="mb-3 row">
                            <div class="col-md-6">
                                <div class="form-check">
                                    @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "form-check-input" } })
                                    @Html.LabelFor(model => model.IsActive, new { @class = "form-check-label" })
                                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-check">
                                    @Html.EditorFor(model => model.IsClosed, new { htmlAttributes = new { @class = "form-check-input" } })
                                    @Html.LabelFor(model => model.IsClosed, new { @class = "form-check-label" })
                                    @Html.ValidationMessageFor(model => model.IsClosed, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success">Create</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                }
            </div>
        </div>
    </div>


    @*-------------------Edit Modal-------------------*@

</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.datatables.net/fixedheader/3.1.7/js/dataTables.fixedHeader.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script>
        $(document).ready(function () {
            var table = $('#jobPostingData').DataTable({
                "ajax": {
                    "url": "@Url.Action("GetJobPostings", "JobPosting")",
                    "type": "GET",
                    "datatype": "json",
                    "dataSrc": "data"
                },
                "columns": [
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            return '<input type="checkbox" class="selectCheckbox" data-id="' + row.JobID + '" />';
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row) {
                            var editLink = '@Url.Action("Edit", "JobPosting", new { id = "PLACEHOLDER" })'.replace("PLACEHOLDER", row.JobID);
                            return '<div style="display: flex; gap: 5px;">' +
                                   '<a href="javascript:void(0);" class="btn btn-primary" data-id="' + row.JobID + '" id="editButton" style="margin-left: 5px;">Edit</a>' +
                                   '<button id="deleteButton" class="btn btn-danger deleteButton" data-id="' + row.JobID + '" style="margin-left: 5px;">Delete</button>' +
                                   '</div>';
                        }
                    },
                    {
                        "data": null,
                        "render": function (data, type, row, meta) {
                            return meta.row + 1;
                        }
                    },
                    { "data": "Title" },
                    { "data": "JobDescription" },
                    { "data": "TotalCandidates" },
                    {
                        "data": "IsActive",
                        "render": function (data, type, row) {
                            return data ? 'Active' : 'Inactive';
                        }
                    },
                    {
                        "data": "ModifiedDate",
                        "render": function (data, type, row) {
                            return moment(data).format('DD-MMM-YYYY hh:mm:ss A');
                        }
                    }
                ],
                "dom": '<"top"f>rt<"bottom"lpi><"clear">',
                "pagingType": "full_numbers",
                "pageLength": 5,
                "lengthMenu": [5, 10, 20, 30, 100],
                "scrollY": "400px",
                "scrollX": true,
                "scrollCollapse": true,
                "fixedHeader": true,
                "language": {
                    "paginate": {
                        "previous": "Previous",
                        "next": "Next",
                        "first": "<<",
                        "last": ">>"
                    }
                }
            });

            $('#jobPostingData_filter input').unbind();
            $('#jobPostingData_filter input').on('keyup', function (e) {
                var value = $(this).val();
                if (value.length >= 3 || value.length === 0) {
                    table.search(value).draw();
                }
            });

            $(document).on('click', '.deleteButton', function () {
                const itemId = $(this).data('id');
                Swal.fire({
                    title: "Are you sure?",
                    text: "Once deleted, you will not be able to recover this item!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonText: "Yes, delete it!",
                    cancelButtonText: "Cancel",
                    dangerMode: true,
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/JobPosting/Delete',
                            type: 'POST',
                            data: { id: itemId },
                            success: function (response) {
                                if (response.success) {
                                    Swal.fire("Deleted!", response.message, "success").then(() => {
                                        table.ajax.reload();
                                    });
                                } else {
                                    Swal.fire("Error!", response.message, "error");
                                }
                            },
                            error: function () {
                                Swal.fire("Error!", "Unable to delete the item. Please try again.", "error");
                            }
                        });
                    }
                });
            });

            $('#selectAll').on('click', function () {
                var rows = table.rows({ 'search': 'applied' }).nodes();
                $('input[type="checkbox"]', rows).prop('checked', this.checked);
            });

            $('#deleteSelected').on('click', function () {
                var selectedIds = [];
                $('.selectCheckbox:checked').each(function () {
                    selectedIds.push($(this).data('id'));
                });
                if (selectedIds.length > 0) {
                    Swal.fire({
                        title: "Are you sure? you will not be able to recover these items!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonText: "Yes, delete them!",
                        cancelButtonText: "No, keep them"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $.ajax({
                                url: '/JobPosting/DeleteSelected',
                                type: 'POST',
                                data: { ids: selectedIds },
                                traditional: true,
                                success: function (response) {
                                    if (response.success) {
                                        Swal.fire("Deleted!", response.message, "success").then(() => {
                                            table.ajax.reload();
                                        });
                                    } else {
                                        Swal.fire("Error!", response.message, "error");
                                    }
                                },
                                error: function (error) {
                                    Swal.fire("Error!", "Unable to delete the items. Please try again.", "error");
                                }
                            });
                        } else if (result.dismiss === Swal.DismissReason.cancel) {
                            Swal.fire("Cancelled", "Your items are safe :)", "error");
                        }
                    });
                } else {
                    Swal.fire("No items selected", "Please select items to delete.", "info");
                }
            });

            $('#createForm').submit(function (e) {
                e.preventDefault();
                $.ajax({
                    url: $(this).attr('action'),
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function (response) {
                        if (response.success) {
                            $('#createModal').modal('hide');
                            $('#createForm')[0].reset();
                            table.ajax.reload();
                            Swal.fire({
                                icon: 'success',
                                title: 'Success',
                                text: "Job Posted successfully",
                                timer: 5000,
                                timerProgressBar: true,
                                showConfirmButton: false
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.errorMsg,
                                showConfirmButton: true
                            });
                        }
                    },
                    error: function (xhr) {
                        console.error(xhr.responseText);
                        alert('An error occurred while saving.');
                    }
                });
            });
        });
    </script>
}
